var api_url = "/wp-content/plugins/Leden/api/";
var suggestions = [];
var full = [];
var ids = [];
var query_fields = [];
var merged_keys = [];
var merged_values = [];
var query_level = 0;

function fieldsAddField() {
    var url = api_url + "AddField.php";
    var elements = document.getElementById("fields-new-form").elements;

    var data = {};
    data['slug'] = elements[0].value;
    data['name'] = elements[1].value;
    data['type'] = elements[2].value;
    data['required'] = elements[3].checked;
    data['visible'] = elements[4].checked;
    data['editable'] = elements[5].checked;

    query = queryString(data);
    jQuery.ajax({
        url: url + '?' + query,
        success: function(data, status, jqXHR) {
            console.log(data);
        }
    });
}

function queryString(data)
{
   var ret = [];
   for (var d in data)
      ret.push(encodeURIComponent(d) + "=" + encodeURIComponent(data[d]));
   return ret.join("&");
}

function saxoSearchOnSubmit() {
    var input = jQuery('#saxo-search-input').val().toLowerCase();

    saxoNameSearch(input);
    return false;
}

function saxoNameSearch(val) {
    var results = [];
    var temp = [];

    jQuery.each(suggestions, function(i, el) {
        if (el.toLowerCase().indexOf(val) > -1)
            temp.push(ids[el]);
    });

    jQuery.each(temp, function(i, el){
            if(jQuery.inArray(el, results) === -1) results.push(el);
    });

    var table = jQuery('#toolkit-table');

    table.find("tr:gt(0)").remove();

    // if (results.length == 0)
        // table.append("<p>Er zijn geen Sk&oslash;llies gevonden bij deze zoekterm.</p>");
    if (results.length > 1) {
        var count = 0;

        jQuery.each(results, function(index, id) {
            console.log(id);
            jQuery('#toolkit-table tr:last').after('<tr class="' + (count % 2 == 0 ? "" : "alternate") + '"><td>' + id + '</td><td><a href="?page=saxo&amp;action=user&amp;id=' + id + '">' + full[id]['full_name'] + '</a></td><td>' + full[id]['date_of_birth'] + '</td><td>' + full[id]['email'] + '</td><td>' + full[id]['phone'] + '</td></tr>');

            count += 1;
        });
        // table.append('</table>');
    }
    if (results.length == 1) {
        saxoUserRedirect(results[0]);
    }

    jQuery("#saxo-search-input").autocomplete("close");
    return false;
}

function saxoPhonebankOnSubmit() {
    var input = jQuery('#saxo-search-input').val().toLowerCase();

    saxoPhonebankSearch(input);
    return false;
}

function saxoPhonebankSearch(val) {
    var results = [];
    var temp = [];

    jQuery.each(suggestions, function(i, el) {
        if (el.toLowerCase().indexOf(val) > -1)
            temp.push(ids[el]);
    });

    jQuery.each(temp, function(i, el){
            if(jQuery.inArray(el, results) === -1) results.push(el);
    });

    if (results.length == 1) {
        saxoPhonebankRedirect(results[0]);
    }

    jQuery("#saxo-search-input").autocomplete("close");
    return false;
}

function saxoPhonebankRedirect(id) {
    var project = jQuery("#saxo-phonebank-project-id").val();
    console.log("?page=saxo-phonebank&action=phonebank&project=" + project + "&target=" + id);
    window.location.href = "?page=saxo-phonebank&action=phonebank&project=" + project + "&target=" + id;
}

function saxoUserRedirect(id) {
    console.log("?page=saxo&action=user&id=" + id);
    window.location.href = "?page=saxo&action=user&id=" + id;
}

jQuery(document).ready(function() {

    var cl = "all";
    var page = jQuery("#saxo-page");
    if (page)
        page = page.val();

    if (page == "saxo") {

        /**
         *  Fill user suggestions.
         */        
        jQuery.getJSON("/wp-content/plugins/Leden/api/GetMemberList.php",
                {'class' : cl},

        function (result) {

            console.log("Received result of length " + result.length);
            jQuery.each(result, function(index, details) {
                var name = details["full_name"];
                var id = details["saxo_id"];

                suggestions.push(name);
                ids[name] = id;
                full[id] = details;
            });

            jQuery("#saxo-search-input").autocomplete({
                // To autocomplete the input field.
                source: function(req, resp) {
                    var res = jQuery.ui.autocomplete.filter(suggestions, req.term);
                    resp(res.slice(0,10));
                },
                // To refresh the page with selected user profile.
                select: function(event, ui) {
                    saxoUserRedirect(ids[ui.item.value]);
                }
            });
        });

        jQuery('#saxo-searchform').on('keyup keypress', function(e) {
            var code = e.keyCode || e.which;
            if (code == 13) {
                e.preventDefault();
                saxoSearchOnSubmit();
                return false;
            }
        });

        jQuery('#saxo-submit-message').on('click', function(e) {
            e.preventDefault();
            jQuery.post("/wp-content/plugins/Leden/api/AddLog.php",
                {
                    'saxo_id' : jQuery('#toolkit-form-input-saxo_id').html().trim(),
                    'log_message': jQuery('#toolkit-form-input-log-message textarea').val().trim()
                },
                function(result) {
                    location.reload();
                }
            );
        });
    }

    if (page == "saxo-phonebank") {

        var project = jQuery("#saxo-phonebank-project-id");
        if (project) {

            jQuery.getJSON("/wp-content/plugins/Leden/api/GetPhonebankTargetList.php",
                    {'project' : project.val()},

            function (result) {

                console.log("Received result of length " + result.length);
                jQuery.each(result, function(index, details) {
                    var name = details["full_name"];
                    var id = details["target_id"];

                    suggestions.push(name);
                    if (details["phone"].length) {
                        suggestions.push(details["phone"]);
                        ids[details["phone"]] = id;
                    }
                    ids[name] = id;
                    full[id] = details;
                });

                jQuery("#saxo-search-input").autocomplete({
                    // To autocomplete the input field.
                    source: function(req, resp) {
                        var res = jQuery.ui.autocomplete.filter(suggestions, req.term);
                        resp(res.slice(0,10));
                    },
                    // To refresh the page with selected user profile.
                    select: function(event, ui) {
                        saxoPhonebankRedirect(ids[ui.item.value]);
                    }
                });
            });
            jQuery('#saxo-searchform').on('keyup keypress', function(e) {
                var code = e.keyCode || e.which;
                if (code == 13) {
                    e.preventDefault();
                    saxoPhonebankOnSubmit();
                    return false;
                }
            });
        }
    }

    if (page == "saxo-query") {
        jQuery.getJSON("/wp-content/plugins/Leden/core/Query/API.php",
            {'class': 'get_query_fields'},
            function (result) {
                query_fields = result;
            }
        );
        jQuery.getJSON("/wp-content/plugins/Leden/core/Query/API.php",
            {'class': 'get_merged_fields'},
            function (result) {
                jQuery.each(result, function(key, value) {
                    merged_keys.push(key);
                    merged_values.push(value);
                });
            }
        );
    }

    /* Dirty hack, not sure if should be datepicker or datepick */
    if (typeof jQuery("input.toolkit-naw-dates").datepicker === 'function') {
        jQuery("input.toolkit-naw-dates").datepicker({multiSelect: 999, dateFormat: "yyyy-mm-dd"});
    } else if (typeof jQuery("input.toolkit-naw-dates").datepick === 'function') {
        jQuery("input.toolkit-naw-dates").datepick({multiSelect: 999, dateFormat: "yyyy-mm-dd"});
    }
});

function saxoPhonebankChangeEmail(id) {
    jQuery(".saxo-phonebank-textbox-wrapper").hide();
    jQuery("#saxo-phonebank-email-" + id + "-wrapper").show();
}

function saxoQueryNewCriterium() {
    var id = query_level;
    query_level += 1;
    var cr_id = 'saxo-query-criterium-' + id;
    var criterium = '<div class="saxo-query-criterium" id="' + cr_id + '"></div>'

    var container = jQuery("#saxo-query-criteria-container");
    if (id) {
        var after = container.children().last();
        console.log(after);
        after.after(criterium);
    }
    else {
        container.html(criterium)
    }
    criterium = container.children().last();

    console.log(query_fields);
    select = saxoQueryMakeField(id, 'first', 0);
    console.log(select);

    criterium.html(select);
    jQuery('#' + cr_id + '-first').openSelect();
    return false;
}

function saxoQueryNextField(select, id, level) {

    var select_id_array = jQuery(select).attr('id').split('-');
    var select_id = select_id_array[select_id_array.length - 1];

    var last = query_fields[level - 1][select_id];
    var next = undefined;
    var value = select.value;

    if (select_id == 'fields')
        next = 'fields_comparison';

    if (last['next'])
        next = last['next'];
    else {
        if (last['options'])
            for (var i = 0; i < last['options'].length; i++) {
                var option = last['options'][i];
                if (option['id'] == value && option['next'].length) {
                    next = option['next'];
                    break;
                }
            }
    }

    if (next == undefined)
        return false;

    var cr_id = 'saxo-query-criterium-' + id;
    var field = query_fields[level][next];
    var criterium = jQuery('#' + cr_id);

    var select = saxoQueryMakeField(id, next, level)
    criterium.children().last().after(select);

    jQuery('#' + cr_id + '-' + next).openSelect();
    return false;
}

function saxoQueryMakeField(id, f_id, level) {
    var cr_id = 'saxo-query-criterium-' + id;
    var field = query_fields[level][f_id];

    if (field.constructor === Object) {
        var select = '<select name="saxo-query[' + f_id + ']" id="' + cr_id + '-' + f_id + '" onchange="saxoQueryNextField(this,' + id + ',' + (level + 1) + ');">';

        select += '<option>-</option>';

        for (var i = 0; i < field['options'].length; i++) {
            var option = field['options'][i];
            select += '<option value="' + option['id'] + '">' + option['name'] + '</option>';
        }

        select += '</select>';
        return select;
    }
    else {
        if (field == 'merged_fields') {
            var select = '<select name="saxo-query[' + f_id + ']" id="' + cr_id + '-' + f_id + '" onchange="saxoQueryNextField(this,' + id + ',' + (level + 1) + ');">';

            select += '<option>-</option>';
            for (var i = 0; i < merged_keys.length; i++) {
                select += '<option value="' + merged_keys[i] + '">' + merged_values[i] + '</option>';
            }

            select += '</select>';
            return select;
        }
        if (field == 'text')
            return '<input name="saxo-query[' + f_id + ']" id="' + cr_id + '-' + f_id + '" />';
        if (field == 'years') {
            var select = '<select name="saxo-query[' + f_id + ']" id="' + cr_id + '-' + f_id + '" onchange="saxoQueryNextField(this,' + id + ',' + (level + 1) + ');">';

            select += '<option>-</option>';
            var d = new Date();
            var max_year = d.getFullYear();
            var min_year = max_year - 20;
            console.log(max_year);
            console.log(min_year);
            for (var i = max_year; i >= min_year; i--) {
                console.log(i);
                select += '<option value="' + i + '">' + i + '</option>';
            }

            select += '</select>';
            return select;
        }
    }
}

(function($) {
    "use strict";
    $.fn.openSelect = function()
    {
        return this.each(function(idx,domEl) {
            if (document.createEvent) {
                var event = document.createEvent("MouseEvents");
                event.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
                domEl.dispatchEvent(event);
            } else if (element.fireEvent) {
                domEl.fireEvent("onmousedown");
            }
        });
    }
}(jQuery));
